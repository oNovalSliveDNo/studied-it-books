# Виселица
#
# Классическая игра "Виселица". Компьютер случайным образом выбирает слово,
# которое игрок должен отгадать буква за буквой. Если игрок не сумеет отгадать
# за отведённое количество попыток, на экране появится фигурка повешенного.

# импорт модуля для работы со случайными значениями
import random

# Константы
# Каждое изображение — это состояние "виселицы" в зависимости от количества ошибок
HANGMAN = (
    """
     ------      # 0 ошибок — начальное состояние
     |    |
     |
     |
     |
     |
     |
     |
     |
    ----------
    """,
    """
     ------      # 1 ошибка — появляется голова
     |    |
     |    O
     |
     |
     |
     |
     |
     |
    ----------
    """,
    """
     ------      # 2 ошибки — добавляется туловище и плечи
     |    |
     |    O
     |   -+-
     | 
     |   
     |   
     |   
     |   
    ----------
    """,
    """
     ------      # 3 ошибки — добавляется левая рука
     |    |
     |    O
     |  /-+-
     |   
     |   
     |   
     |   
     |   
    ----------
    """,
    """
     ------      # 4 ошибки — добавляется правая рука
     |    |
     |    O
     |  /-+-/
     |   
     |   
     |   
     |   
     |   
    ----------
    """,
    """
     ------      # 5 ошибок — добавляется туловище вниз
     |    |
     |    O
     |  /-+-/
     |    |
     |   
     |   
     |   
     |   
    ----------
    """,
    """
     ------      # 6 ошибок — добавляется одна нога
     |    |
     |    O
     |  /-+-/
     |    |
     |    |
     |   | 
     |   | 
     |   
    ----------
    """,
    """
     ------      # 7 ошибок — добавляется вторая нога (максимум)
     |    |
     |    O
     |  /-+-/
     |    |
     |    |
     |   | |
     |   | |
     |  
    ----------
    """
)

MAX_WRONG = len(HANGMAN) - 1  # Максимальное количество ошибок, которое можно сделать
WORDS = ("OVERUSED", "CLAM", "GUAM", "TAFFETA", "PYTHON")  # Список возможных слов

# Инициализация переменных
word = random.choice(WORDS)  # Выбираем случайное слово из списка
so_far = "-" * len(word)  # Строка с дефисами на месте букв (что угадано)
wrong = 0  # Количество ошибок игрока
used = []  # Список уже предложенных игроком букв

# Приветствие
print("Добро пожаловать в игру 'Виселица'! Удачи вам!")

# Основной игровой цикл — продолжается, пока игрок не проиграл и не угадал слово
while wrong < MAX_WRONG and so_far != word:
    # Показ текущего состояния виселицы в зависимости от количества ошибок
    print(HANGMAN[wrong])
    # Показ уже использованных букв
    print("\nВы уже предлагали следующие буквы:\n", used)
    # Показ текущего состояния угадываемого слова
    print("\nОтгаданное вами в слове сейчас выглядит так:\n", so_far)

    # Получаем букву от пользователя и переводим в верхний регистр
    guess = input("\nВведите букву: ").upper()

    # Проверка: была ли уже предложена эта буква
    while guess in used:
        print("Вы уже предлагали букву", guess)
        guess = input("Введите другую букву: ").upper()

    # Добавляем новую букву в список использованных
    used.append(guess)

    # Если буква есть в слове
    if guess in word:
        print("\nДа! Буква", guess, "есть в слове!")

        # Формируем новую строку с отгаданными буквами
        new = ""
        for i in range(len(word)):
            if guess == word[i]:  # Если буква угадана — подставляем её
                new += guess
            else:  # Иначе — оставляем прежний символ
                new += so_far[i]
        so_far = new  # Обновляем текущее состояние отгаданного слова

    else:
        # Если буквы нет в слове — сообщаем об этом и увеличиваем количество ошибок
        print("\nК сожалению, буквы", guess, "нет в слове.")
        wrong += 1

# Завершение игры
if wrong == MAX_WRONG:
    print(HANGMAN[wrong])  # Показываем финальное состояние виселицы
    print("\nВас повесили!")  # Сообщаем о проигрыше
else:
    print("\nПоздравляем! Вы отгадали слово!")  # Сообщаем о победе

# Показываем загаданное слово
print("\nБыло загадано слово:", word)

# Ожидаем нажатия Enter для выхода
input("\nНажмите Enter, чтобы выйти.")
