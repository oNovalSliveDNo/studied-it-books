# Крестики-нолики
# Компьютер играет в крестики-нолики против пользователя

# глобальные константы
X = "X"  # Символ игрока, который будет играть крестиками
O = "O"  # Символ игрока, который будет играть ноликами
EMPTY = " "  # Пустое поле на доске
TIE = "Ничья"  # Значение, если игра закончится ничьей
NUM_SQUARES = 9  # Всего клеток на доске (3x3)


def display_instruct():
    """Выводит на экран инструкцию для игрока."""
    print(
        """
        Добро пожаловать на ринг грандиознейших интеллектуальных состязаний всех времен.
        Твой мозг и мой процессор сойдутся в схватке за доской игры "Крестики-нолики".

        Чтобы сделать ход, введи число от О до 8. Числа однозначно соответствуют полям
        доски - так, как показано ниже: 

                                            0 | 1 | 2
                                            ---------
                                            3 | 4 | 5
                                            ---------
                                            6 | 7 | 8

        Приготовься к бою, жалкий белковый человечишка. Вот-вот начнется решающее сражение.\n 
        """
    )


def ask_yes_no(question):
    """Задает вопрос с ответом 'Да' или 'Нет'."""
    response = None
    # Повторяем запрос, пока не получим ответ 'y' или 'n'
    while response not in ("y", "n"):
        response = input(question).lower()  # Считываем ответ и приводим к нижнему регистру
    return response  # Возвращаем полученный ответ


def ask_number(question, low, high):
    """Просит ввести число из диапазона."""
    response = None
    # Повторяем запрос, пока введенное число не будет в пределах диапазона
    while response not in range(low, high):
        response = int(input(question))  # Считываем число и преобразуем его в целое
    return response  # Возвращаем введенное число


def pieces():
    """Определяет принадлежность первого хода."""
    go_first = ask_yes_no("Xoчeшь оставить за собой первый ход? (y/n): ")  # Спрашиваем, кто будет ходить первым
    if go_first == "y":
        print("\nHy что ж, даю тебе фору: играй крестиками.")
        human = X  # Человек играет крестиками
        computer = O  # Компьютер играет ноликами
    else:
        print("\nTвoя удаль тебя погубит...")
        computer = X  # Компьютер играет крестиками
        human = O  # Человек играет ноликами
    return computer, human  # Возвращаем символы игроков


def new_board():
    """Создает новую игровую доску."""
    board = []
    # Заполняем доску пустыми клетками
    for square in range(NUM_SQUARES):
        board.append(EMPTY)  # Каждое поле инициализируется как пустое
    return board  # Возвращаем пустую доску


def display_board(board):
    """Отображает игровую доску на экране."""
    # Форматируем вывод доски, чтобы она выглядела как 3x3
    print("\n\t", board[0], "|", board[1], "|", board[2])
    print("\t", "---------")
    print("\t", board[3], "|", board[4], "|", board[5])
    print("\t", "---------")
    print("\t", board[6], "|", board[7], "|", board[8], "\n")


def legal_moves(board):
    """Создает список доступных ходов."""
    moves = []
    # Проходим по всем клеткам доски и добавляем в список те, которые пустые
    for square in range(NUM_SQUARES):
        if board[square] == EMPTY:
            moves.append(square)  # Добавляем номер клетки в список доступных ходов
    return moves  # Возвращаем список доступных ходов


def winner(board):
    """Определяет победителя в игре."""
    # Все возможные выигрышные комбинации
    WAYS_TO_WIN = ((0, 1, 2),
                   (3, 4, 5),
                   (6, 7, 8),
                   (0, 3, 6),
                   (1, 4, 7),
                   (2, 5, 8),
                   (0, 4, 8),
                   (2, 4, 6))

    # Проверяем каждую выигрышную комбинацию
    for row in WAYS_TO_WIN:
        # Если все 3 клетки в строке заняты одинаковыми символами, возвращаем победителя
        if board[row[0]] == board[row[1]] == board[row[2]] != EMPTY:
            winner = board[row[0]]  # Символ победителя
            return winner  # Возвращаем победителя (X или O)

    # Если на доске больше нет пустых клеток, значит ничья
    if EMPTY not in board:
        return TIE  # Возвращаем "Ничья"

    return None  # Если победителя нет, возвращаем None, игра продолжается


def human_move(board, human):
    """Получает ход человека."""
    # Получаем список доступных ходов
    legal = legal_moves(board)
    move = None
    # Повторяем запрос, пока игрок не выберет свободное поле
    while move not in legal:
        # Просим пользователя ввести число от 0 до 8, соответствующее полю на доске
        move = ask_number("Tвoй ход. Выбери одно из полей (0 - 8): ", 0, NUM_SQUARES)
        if move not in legal:
            # Если выбранное поле занято, выводим предупреждение
            print("\nCмeшнoй человек! Это поле уже занято. Выбери дpyroe.\n")
    print("Ладно...")
    # Возвращаем выбранное поле
    return move


def computer_move(board, computer, human):
    """Делает ход за компьютерного противника."""

    # создаем рабочую копию доски, потому что функция будет менять значения на ней
    board = board[:]

    # Определяем предпочтительные поля для хода (лучшие поля сначала)
    BEST_MOVES = (4, 0, 2, 6, 8, 1, 3, 5, 7)

    print("Я выберу поле номер", end=" ")

    # Сначала проверяем, не может ли компьютер выиграть на следующем ходу
    for move in legal_moves(board):
        board[move] = computer  # Пробуем поставить крестик на это поле

        # Если с таким ходом компьютер выигрывает, делаем этот ход
        if winner(board) == computer:
            print(move)
            return move

        # Если проверка не прошла, отменяем этот ход и пробуем следующий
        board[move] = EMPTY

    # Теперь проверяем, не может ли игрок выиграть на следующем ходу, чтобы заблокировать его
    for move in legal_moves(board):
        board[move] = human  # Пробуем поставить нолик на это поле

        # Если с таким ходом выигрывает человек, блокируем этот ход
        if winner(board) == human:
            print(move)
            return move

        # Если проверка не прошла, отменяем этот ход и пробуем следующий
        board[move] = EMPTY

    # Если ни одна сторона не может выиграть на следующем ходу, выбираем лучшее доступное поле
    for move in BEST_MOVES:
        if move in legal_moves(board):
            print(move)
            return move


# Эта функция используется для того, чтобы чередовать ходы игроков.
def next_turn(turn):
    """Осуществляет переход хода."""
    # Если ходит X (игрок), то следующий ходит O (компьютер), и наоборот
    if turn == X:
        return O
    else:
        return X


def congrat_winner(the_winner, computer, human):
    """Поздравляем победителя игры."""
    # Если есть победитель, выводим его победу, иначе сообщаем о ничьей
    if the_winner != TIE:
        print("Три", the_winner, "в ряд!\n")
    else:
        print("Ничья!\n")

    # Поздравляем победителя
    if the_winner == computer:
        print("Kaк я и предсказывал, победа в очередной раз осталась за мной. \n" \
              "Вот еще один довод в пользу того, что компьютеры превосходят людей решительно во всем.")

    elif the_winner == human:
        print("O нет, этого не может быть! Неужели ты как-то сумел перехитрить меня, белковый? \n" \
              "Клянусь: я, компьютер, не допущу этого больше никогда!")

    elif the_winner == TIE:
        print("Teбe несказанно повезло, дружок: ты сумел свести игру вничью. \n" \
              "Радуйся же сегодняшнему успеху! Завтра тебе уже не суждено его повторить.")


def main():
    # Печатаем инструкцию для игрока
    display_instruct()
    # Определяем, кто будет играть крестиками, а кто ноликами
    computer, human = pieces()
    # Начинаем игру с хода крестиками (X)
    turn = X
    # Создаем новую пустую доску
    board = new_board()
    # Отображаем пустую доску
    display_board(board)

    # Игра продолжается, пока не будет победителя или ничьей
    while not winner(board):
        # Если ходит человек, он выбирает клетку
        if turn == human:
            move = human_move(board, human)
            board[move] = human  # Ставим нолик или крестик на выбранную клетку
        else:
            move = computer_move(board, computer, human)
            board[move] = computer  # Компьютер ставит свой ход
        # Отображаем доску после хода
        display_board(board)
        # Меняем ход
        turn = next_turn(turn)

    # Определяем победителя игры
    the_winner = winner(board)
    # Поздравляем победителя
    congrat_winner(the_winner, computer, human)


# запуск программы
main()
input("\n\nHaжмитe Enter, чтобы выйти.")
