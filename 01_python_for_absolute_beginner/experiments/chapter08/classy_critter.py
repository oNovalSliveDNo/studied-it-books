# Классово верная зверюшка
# Демонстрирует атрибуты класса и статические методы

class Critter(object):
    """Виртуальный питомец"""

    # Атрибут класса, который отслеживает общее количество созданных зверюшек
    total = 0

    # Статический метод, который выводит общее количество зверюшек
    @staticmethod
    def status():
        print("\nBсеgо зверюшек сейчас", Critter.total)

    # Метод-конструктор для создания нового объекта Critter
    def __init__(self, name):
        print("Появилась на свет новая зверюшка!")
        # Атрибут объекта, который хранит имя зверюшки
        self.name = name
        # Увеличиваем общее количество зверюшек при каждом создании нового объекта
        Critter.total += 1


# основная часть программы
# Печатаем текущее значение атрибута класса Critter.total
print("Haxoжy значение атрибута класса Critter.total:", end=" ")
print(Critter.total)

print("\nCoздaю зверюшек.")
# Создаем три экземпляра класса Critter с разными именами
crit1 = Critter("зверюшка 1")  # Создание первой зверюшки
crit2 = Critter("зверюшка 2")  # Создание второй зверюшки
crit3 = Critter("зверюшка 3")  # Создание третьей зверюшки

# Вызов статического метода, который выводит общее количество зверюшек
Critter.status()

# Обращаемся к атрибуту класса через объект crit1
# Это возможно, но рекомендуется обращаться к атрибутам класса через сам класс (Critter.total)
print("\nOбpaщaюcь к атрибуту класса через объект:", end=" ")
print(crit1.total)  # Печатаем общее количество зверюшек через объект crit1

# Ожидаем нажатия клавиши Enter перед выходом из программы
input("\n\nHaжмите Enter, чтобы выйти.")
