# Моя зверюшка
# Виртуальный питомец, о котором пользователь может заботиться

class Critter(object):
    """Виртуальный питомец"""

    def __init__(self, name, hunger=0, boredom=0):
        """Конструктор для создания нового питомца с заданным именем, уровнем голода и скуки"""
        self.name = name  # Имя питомца
        self.hunger = hunger  # Уровень голода питомца
        self.boredom = boredom  # Уровень скуки питомца

    def __pass_time(self):
        """Метод для увеличения уровня голода и скуки питомца"""
        self.hunger += 1  # Увеличиваем голод
        self.boredom += 1  # Увеличиваем скуку

    @property
    def mood(self):
        """Свойство для получения настроения питомца на основе его голода и скуки"""
        unhappiness = self.hunger + self.boredom  # Общее недовольство питомца
        if unhappiness < 5:
            m = "прекрасно"  # Если общее недовольство меньше 5, настроение хорошее
        elif 5 <= unhappiness <= 10:
            m = "неплохо"  # Если недовольство от 5 до 10, настроение среднее
        elif 11 <= unhappiness <= 15:
            m = "не сказать, чтобы хорошо"  # Если недовольство от 11 до 15, настроение плохое
        else:
            m = "ужасно"  # Если недовольство больше 15, настроение ужасное
        return m  # Возвращаем текущее настроение

    def talk(self):
        """Метод, который выводит информацию о настроении питомца и увеличивает голод и скуку"""
        print("Меня зовут", self.name, "и сейчас я чувствую себя", self.mood, "\n")
        self.__pass_time()  # Питомец становится более голодным и скучающим

    def eat(self, food=4):
        """Метод, который кормит питомца и уменьшает уровень голода"""
        print("Мррр... Спасибо!")  # Питомец благодарит за еду
        self.hunger -= food  # Уменьшаем уровень голода
        if self.hunger < 0:
            self.hunger = 0  # Если голод меньше 0, устанавливаем на 0
        self.__pass_time()  # После еды питомец становится более скучным

    def play(self, fun=4):
        """Метод, который развлекает питомца и уменьшает уровень скуки"""
        print("Yиии!")  # Питомец радуется игре
        self.boredom -= fun  # Уменьшаем уровень скуки
        if self.boredom < 0:
            self.boredom = 0  # Если скука меньше 0, устанавливаем на 0
        self.__pass_time()  # После игры питомец становится более голодным и скучающим


def main():
    """Основная функция игры, в которой пользователь взаимодействует с питомцем"""
    crit_name = input("Kaк вы назовете свою зверюшку?: ")  # Запрашиваем имя питомца у пользователя
    crit = Critter(crit_name)  # Создаем объект питомца с заданным именем

    choice = None  # Переменная для хранения выбора пользователя
    while choice != "0":
        # Меню игры
        print("""
        Моя зверюшка 

        0 - Выйти
        1 - Узнать о самочувствии зверюшки
        2 - Покормить зверюшку 
        3 - Поиграть со зверюшкой 
        """)

        choice = input("Baш выбор: ")  # Получаем выбор пользователя
        print()

        # выход из игры
        if choice == "0":
            print("Дo свидания.")  # Прощаемся с пользователем

        # беседа с питомцем
        elif choice == "1":
            crit.talk()  # Питомец расскажет, как он себя чувствует

        # кормление питомца
        elif choice == "2":
            crit.eat()  # Кормим питомца

        # игра с питомцем
        elif choice == "3":
            crit.play()  # Играем с питомцем

        # если пользователь ввел неправильный вариант
        else:
            print("\nИзвините, в меню нет пункта", choice)  # Сообщаем, что такой опции нет

# Запуск основной функции
main()

# Ожидаем нажатия клавиши Enter перед выходом из программы
input("\n\nHaжмите Enter, чтобы выйти.")
