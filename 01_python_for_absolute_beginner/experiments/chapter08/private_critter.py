# Закрытая зверюшка
# Демонстрирует закрытые переменные и методы

class Critter(object):
    """Виртуальный питомец"""

    # Метод-конструктор для создания нового объекта Critter
    def __init__(self, name, mood):
        print("Появилась на свет новая зверюшка!")
        self.name = name  # открытый атрибут (имя зверюшки, доступно извне)
        self.__mood = mood  # закрытый атрибут (настроение зверюшки, доступно только внутри класса)

    # Метод, который выводит информацию о зверюшке
    def talk(self):
        print("\nMeня зовут", self.name)  # Доступ к открытому атрибуту name
        print("Ceйчac я чувствую себя", self.__mood, "\n")  # Доступ к закрытому атрибуту __mood

    # Закрытый метод, который нельзя вызвать извне
    def __private_method(self):
        print("Этo закрытый метод.")  # Этот метод доступен только внутри класса

    # Открытый метод, который вызывает закрытый метод
    def public_method(self):
        print("Этo открытый метод.")  # Этот метод доступен извне
        self.__private_method()  # Внутри этого метода вызывается закрытый метод


# основная часть программы
# Создаем объект Critter с именем "Бобик" и настроением "прекрасно"
crit = Critter(name="Бобик", mood="прекрасно")

# Вызываем метод talk() для объекта crit, чтобы узнать его имя и настроение
crit.talk()

# Вызываем открытый метод public_method(), который в свою очередь вызывает закрытый метод
crit.public_method()

# Ожидаем нажатия клавиши Enter перед выходом из программы
input("\n\nHaжмите Enter, чтобы выйти.")
