# Зверюшка со свойствами
# Демонстрирует свойства (getter и setter)

class Critter(object):
    """Виртуальный питомец"""

    # Метод-конструктор для создания нового объекта Critter
    def __init__(self, name):
        print("Появилась на свет новая зверюшка!")
        self.__name = name  # Закрытое имя зверюшки, доступное только через getter и setter

    # Свойство для получения имени зверюшки (getter)
    @property
    def name(self):
        return self.__name  # Возвращает имя зверюшки

    # Свойство для изменения имени зверюшки (setter)
    @name.setter
    def name(self, new_name):
        # Проверяем, что новое имя не является пустой строкой
        if new_name == "":
            print("Имя зверюшки не может быть пустой строкой.")  # Если имя пустое, выводим сообщение об ошибке
        else:
            self.__name = new_name  # Если имя корректное, меняем его
            print("Имя успешно изменено.")  # Сообщение об успешном изменении имени

    # Метод, который выводит информацию о зверюшке
    def talk(self):
        print("\nПpивeт, меня зовут", self.name)  # Используем свойство name для получения имени


# основная часть программы
# Создаем объект Critter с именем "Бобик"
crit = Critter("Бобик")
crit.talk()  # Приветствие, выводим имя зверюшки

print("\nМою зверюшку зовут:", end=" ")
print(crit.name)  # Получаем имя с помощью свойства name

print("\nПробую изменить имя зверюшки на Мурзик...")
crit.name = "Мурзик"  # Меняем имя с помощью setter
print("Moю зверюшку зовут:", end=" ")
print(crit.name)  # Выводим новое имя

print("\nПробую изменить имя зверюшки на пустую строку...")
crit.name = ""  # Попытка установить пустое имя, которое вызовет сообщение об ошибке
print("Мою зверюшку зовут:", end=" ")
print(crit.name)  # Имя не изменится, потому что setter заблокировал установку пустого имени

# Ожидаем нажатия клавиши Enter перед выходом из программы
input("\n\nHaжмите Enter, чтобы выйти.")
