# Сумасшедший сказочник
# Создает рассказ на основе пользовательского ввода

from tkinter import *  # Импортируем все компоненты из библиотеки tkinter


# Определение класса GUI-приложения для создания рассказа на основе ввода пользователя
class Application(Frame):
    """ GUI-приложение, создающее рассказ на основе пользовательского ввода. """

    def __init__(self, master):
        """ Инициализирует рамку для приложения. """
        super(Application, self).__init__(master)  # Инициализация родительского класса Frame
        self.grid()  # Размещаем рамку в окне с помощью менеджера размещения grid
        self.create_widgets()  # Создаем все элементы интерфейса

    def create_widgets(self):
        """ Создает элементы управления, с помощью которых пользователь будет вводить исходные данные и получать готовый рассказ. """
        # метка с текстом-инструкцией, что нужно сделать
        Label(self,
              text="Введите данные для создания нового рассказа"  # Инструкция для пользователя
              ).grid(row=0, column=0, columnspan=2, sticky=W)  # Размещаем метку в первой строке

        # метка и поле ввода для имени человека
        Label(self,
              text="Имя человека: "  # Текст метки для ввода имени
              ).grid(row=1, column=0, sticky=W)  # Размещаем метку в строке 1
        self.person_ent = Entry(self)  # Создаем поле ввода для имени
        self.person_ent.grid(row=1, column=1, sticky=W)  # Размещаем поле ввода рядом с меткой

        # метка и поле ввода для существительного во множественном числе
        Label(self,
              text="Существительное во мн. числе: "  # Текст метки для существительного
              ).grid(row=2, column=0, sticky=W)  # Размещаем метку в строке 2
        self.noun_ent = Entry(self)  # Создаем поле ввода для существительного
        self.noun_ent.grid(row=2, column=1, sticky=W)  # Размещаем поле ввода рядом с меткой

        # метка и поле ввода для глагола в инфинитиве
        Label(self,
              text="Глагол в инфинитиве: "  # Текст метки для глагола
              ).grid(row=3, column=0, sticky=W)  # Размещаем метку в строке 3
        self.verb_ent = Entry(self)  # Создаем поле ввода для глагола
        self.verb_ent.grid(row=3, column=1, sticky=W)  # Размещаем поле ввода рядом с меткой

        # метка перед группой флажков с прилагательными
        Label(self,
              text="Прилагательное (-ые): "  # Текст метки для прилагательных
              ).grid(row=4, column=0, sticky=W)  # Размещаем метку в строке 4

        # флажок со словом "нетерпеливый"
        self.is_itchy = BooleanVar()  # Переменная для хранения состояния флажка
        Checkbutton(self,
                    text="нетерпеливый",  # Текст флажка
                    variable=self.is_itchy  # Привязываем флажок к переменной
                    ).grid(row=4, column=1, sticky=W)  # Размещаем флажок в строке 4

        # флажок со словом "радостный"
        self.is_joyous = BooleanVar()  # Переменная для хранения состояния флажка
        Checkbutton(self,
                    text="радостный",  # Текст флажка
                    variable=self.is_joyous  # Привязываем флажок к переменной
                    ).grid(row=4, column=2, sticky=W)  # Размещаем флажок в строке 4

        # флажок со словом "пронизывающий"
        self.is_electric = BooleanVar()  # Переменная для хранения состояния флажка
        Checkbutton(self,
                    text="пронизывающий",  # Текст флажка
                    variable=self.is_electric  # Привязываем флажок к переменной
                    ).grid(row=4, column=3, sticky=W)  # Размещаем флажок в строке 4

        # метка перед переключателем с названиями частей тела
        Label(self,
              text="Часть тела:"  # Текст метки для части тела
              ).grid(row=5, column=0, sticky=W)  # Размещаем метку в строке 5

        # переменная для хранения выбранной части тела
        self.body_part = StringVar()  # Переменная для части тела, выбранной пользователем
        self.body_part.set(None)  # Изначально не выбрана часть тела

        # создаем переключатели (radio buttons) для частей тела
        body_parts = ["пупок", "большой палец ноги", "продолговатый мозг"]  # Список частей тела
        column = 1  # Начальный столбец для размещения переключателей
        for part in body_parts:  # Перебираем все части тела
            Radiobutton(self,
                        text=part,  # Текст переключателя
                        variable=self.body_part,  # Привязываем переключатель к переменной
                        value=part  # Значение, которое будет присвоено при выборе переключателя
                        ).grid(row=5, column=column, sticky=W)  # Размещаем переключатель в строке 5
            column += 1  # Переходим к следующему столбцу для следующего переключателя

        # кнопка, которая вызывает функцию tell_story
        Button(self,
               text="Получить рассказ",  # Текст кнопки
               command=self.tell_story  # При нажатии вызывает функцию tell_story
               ).grid(row=6, column=0, sticky=W)  # Размещаем кнопку в строке 6

        # текстовая область для вывода результата — рассказа
        self.story_txt = Text(self, width=75, height=10, wrap=WORD)  # Создаем текстовую область
        self.story_txt.grid(row=7, column=0, columnspan=4)  # Размещаем текстовую область в строке 7

    def tell_story(self):
        """ Создает рассказ на основе введенных данных и отображает его в текстовой области. """
        # Получаем данные из полей ввода
        person = self.person_ent.get()  # Имя человека
        noun = self.noun_ent.get()  # Существительное
        verb = self.verb_ent.get()  # Глагол
        body_part = self.body_part.get()  # Выбранная часть тела

        # Создаем строку с рассказом, используя введенные данные
        story = f"{person} {verb} по направлению к {noun}, когда его {body_part} начал болеть."

        # Добавляем прилагательные в рассказ, если они были выбраны
        if self.is_itchy.get():
            story += " Он почувствовал, как его тело стало нетерпеливым."
        if self.is_joyous.get():
            story += " Вскоре он почувствовал радость."
        if self.is_electric.get():
            story += " Его тело стало пронизано электричеством."

        # Выводим рассказ в текстовую область
        self.story_txt.delete(0.0, END)  # Очищаем текстовую область перед вставкой нового текста
        self.story_txt.insert(0.0, story)  # Вставляем рассказ в текстовую область

    def tell_story(self):
        """ Заполняет текстовую область очередной историей на основе пользовательского ввода. """
        # получение значений из GUI
        person = self.person_ent.get()  # Получаем имя, введенное пользователем
        noun = self.noun_ent.get()  # Получаем существительное во множественном числе
        verb = self.verb_ent.get()  # Получаем глагол в инфинитиве

        # Создаем строку с прилагательными, если пользователь выбрал соответствующие флажки
        adjectives = ""
        if self.is_itchy.get():
            adjectives += "нетерпеливое, "  # Добавляем прилагательное, если флажок выбран
        if self.is_joyous.get():
            adjectives += "радостное, "
        if self.is_electric.get():
            adjectives += "пронизывающее, "

        body_part = self.body_part.get()  # Получаем выбранную часть тела из переключателя

        # соЗдание рассказа
        story = "Знаменитый путешественник "
        story += person  # Вставляем имя путешественника
        story += " уже совсем отчаялся довершить дело всей своей жизни - поиск затерянного города, в котором, по легенде, обитали "
        story += noun.title()  # Используем существительное с заглавной буквы
        story += ". Но однажды "
        story += noun  # Используем то же существительное
        story += " и "
        story += person + " столкнулись лицом к лицу. "
        story += "Мощное, "
        story += adjectives  # Вставляем выбранные прилагательные (если есть)
        story += "ни с чем не сравнимое чувство охватило душу путешественника. "
        story += "После стольких лет поисков цель была наконец достигнута. "
        story += person
        story += " ощутил, как на его " + body_part + " скатилась слезинка. "
        story += "И тут внезапно "
        story += noun
        story += " перешли в атаку, и "
        story += person + " был ими мгновенно сожран. "
        story += "Мораль? Если задумали "
        story += verb
        story += " надо делать это с осторожностью."

        # вывод рассказа на экран
        self.story_txt.delete(0.0, END)  # Очищаем текстовую область перед вставкой нового рассказа
        self.story_txt.insert(0.0, story)  # Вставляем созданный рассказ в текстовую область


# основная часть
root = Tk()  # Создаем главное окно приложения
root.title("Сумасшедший сказочник")  # Устанавливаем заголовок окна
app = Application(root)  # Создаем экземпляр нашего приложения
root.mainloop()  # Запускаем главный цикл приложения (ожидание действий пользователя)
