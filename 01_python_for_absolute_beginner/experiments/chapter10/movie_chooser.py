# Киноман
# Демонстрирует применение флажков для выбора любимых жанров кино

from tkinter import *  # Импортируем все компоненты из библиотеки tkinter


# Определение класса GUI-приложения, которое позволяет выбрать любимые жанры кино
class Application(Frame):
    """ GUI-приложение, позволяющее выбрать любимые жанры кино. """

    def __init__(self, master):
        """ Инициализирует рамку и компоненты интерфейса. """
        super(Application, self).__init__(master)  # Инициализация родительского класса Frame
        self.grid()  # Размещаем рамку в окне с помощью менеджера размещения grid
        self.create_widgets()  # Создаем все элементы интерфейса

    def create_widgets(self):
        """ Создает элементы, с помощью которых пользователь будет выбирать свои любимые жанры. """
        # метка с описанием, что нужно сделать
        Label(self,
              text="Укажите ваши любимые жанры кино"  # Текст, который поясняет, что нужно выбрать
              ).grid(row=0, column=0, sticky=W)  # Размещаем метку в первой строке

        # метка-инструкция, поясняющая, что можно выбирать несколько жанров
        Label(self,
              text="Выберите все, что вам по вкусу:"
              ).grid(row=1, column=0, sticky=W)  # Размещаем инструкцию под описанием

        # флажок для жанра "Комедия"
        self.likes_comedy = BooleanVar()  # Создаем переменную для хранения состояния флажка (выбран или нет)
        Checkbutton(self,
                    text="Комедия",  # Текст флажка
                    variable=self.likes_comedy,  # Привязываем флажок к переменной
                    command=self.update_text  # При изменении состояния флажка будет вызвана функция update_text
                    ).grid(row=2, column=0, sticky=W)  # Размещаем флажок в строке 2

        # флажок для жанра "Драма"
        self.likes_drama = BooleanVar()  # Переменная для состояния флажка "Драма"
        Checkbutton(self,
                    text="Драма",  # Текст флажка
                    variable=self.likes_drama,  # Привязываем флажок к переменной
                    command=self.update_text  # При изменении состояния флажка вызываем функцию update_text
                    ).grid(row=3, column=0, sticky=W)  # Размещаем флажок в строке 3

        # флажок для жанра "Фильм о любви"
        self.likes_romance = BooleanVar()  # Переменная для состояния флажка "Фильм о любви"
        Checkbutton(self,
                    text="Фильм о любви",  # Текст флажка
                    variable=self.likes_romance,  # Привязываем флажок к переменной
                    command=self.update_text  # При изменении состояния флажка вызываем функцию update_text
                    ).grid(row=4, column=0, sticky=W)  # Размещаем флажок в строке 4

        # текстовая область для отображения выбранных жанров
        self.results_txt = Text(self, width=40, height=5, wrap=WORD)  # Текстовая область для вывода результатов
        self.results_txt.grid(row=5, column=0, columnspan=3)  # Размещаем текстовую область в строке 5

    def update_text(self):
        """ Обновляет текстовый элемент в зависимости от выбранных жанров. """
        likes = ""  # Строка, в которой будем хранить описание выбранных жанров

        # Проверяем, выбран ли жанр "Комедия" и добавляем информацию в строку likes
        if self.likes_comedy.get():
            likes += "Вам нравятся комедии.\n"

        # Проверяем, выбран ли жанр "Драма" и добавляем информацию в строку likes
        if self.likes_drama.get():
            likes += "Вас привлекает жанр драмы.\n"

        # Проверяем, выбран ли жанр "Фильм о любви" и добавляем информацию в строку likes
        if self.likes_romance.get():
            likes += "Вам по вкусу кино о любви."

        # Очищаем текстовую область перед вставкой нового текста
        self.results_txt.delete(0.0, END)
        # Вставляем в текстовую область информацию о выбранных жанрах
        self.results_txt.insert(0.0, likes)


# основная часть программы
root = Tk()  # Создаем основное окно приложения
root.title("Kинoмaн")  # Устанавливаем заголовок окна
app = Application(root)  # Создаем экземпляр приложения
root.mainloop()  # Запускаем цикл обработки событий, чтобы окно стало интерактивным
